diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java
index c236294e9..8d0587b1b 100644
--- a/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java
+++ b/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java
@@ -53,7 +53,7 @@ public class NodeMetadataIT {
                   assertThat(broadcastAddress.getAddress()).isEqualTo(connectAddress.getAddress()));
       assertThat(node.getListenAddress().get().getAddress()).isEqualTo(connectAddress.getAddress());
       assertThat(node.getDatacenter()).isEqualTo("dc1");
-      assertThat(node.getRack()).isEqualTo("r1");
+      assertThat(node.getRack()).isEqualTo("RAC1");
       if (!CcmBridge.DSE_ENABLEMENT) {
         // CcmBridge does not report accurate C* versions for DSE, only approximated values
         assertThat(node.getCassandraVersion()).isEqualTo(CCM_RULE.getCassandraVersion());
diff --git a/test-infra/revapi.json b/test-infra/revapi.json
index ebcb74d46..97b31a71a 100644
--- a/test-infra/revapi.json
+++ b/test-infra/revapi.json
@@ -42,7 +42,17 @@
         "old": "method com.datastax.oss.driver.internal.core.config.typesafe.DefaultDriverConfigLoaderBuilder com.datastax.oss.driver.api.testinfra.session.SessionUtils::configLoaderBuilder()",
         "new": "method com.datastax.oss.driver.api.core.config.ProgrammaticDriverConfigLoaderBuilder com.datastax.oss.driver.api.testinfra.session.SessionUtils::configLoaderBuilder()",
         "justification": "JAVA-2201: Expose a public API for programmatic config"
-      }
+      },
+      {
+        "code": "java.method.removed",
+        "old": "method com.datastax.oss.driver.api.testinfra.ccm.CcmBridge.Builder com.datastax.oss.driver.api.testinfra.ccm.CcmBridge.Builder::withIpPrefix(java.lang.String)",
+        "justification": "Scylla CCM support"
+      },
+      {
+        "code": "java.method.removed",
+        "old": "method com.datastax.oss.driver.api.testinfra.ccm.CustomCcmRule.Builder com.datastax.oss.driver.api.testinfra.ccm.CustomCcmRule.Builder::withIpPrefix(java.lang.String)",
+        "justification": "Scylla CCM support"
+      }
     ]
   }
 }
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
index f10a2cdeb..a9f3e506f 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
@@ -59,7 +59,7 @@ public class CcmBridge implements AutoCloseable {
 
   private final AtomicBoolean created = new AtomicBoolean();
 
-  private final String ipPrefix;
+  private final String idPrefix;
 
   private final Map<String, Object> cassandraConfiguration;
   private final Map<String, Object> dseConfiguration;
@@ -70,6 +70,7 @@ public class CcmBridge implements AutoCloseable {
   private final String jvmArgs;
 
   public static final Version VERSION = Version.parse(System.getProperty("ccm.version", "3.11.0"));
+  public static final String SCYLLA_VERSION = System.getProperty("scylla.version");
 
   public static final String INSTALL_DIRECTORY = System.getProperty("ccm.directory");
 
@@ -126,7 +127,7 @@ public class CcmBridge implements AutoCloseable {
   private CcmBridge(
       Path configDirectory,
       int[] nodes,
-      String ipPrefix,
+      String idPrefix,
       Map<String, Object> cassandraConfiguration,
       Map<String, Object> dseConfiguration,
       List<String> dseConfigurationRawYaml,
@@ -145,7 +146,7 @@ public class CcmBridge implements AutoCloseable {
     } else {
       this.nodes = nodes;
     }
-    this.ipPrefix = ipPrefix;
+    this.idPrefix = idPrefix;
     this.cassandraConfiguration = cassandraConfiguration;
     this.dseConfiguration = dseConfiguration;
     this.rawDseYaml = dseConfigurationRawYaml;
@@ -194,7 +195,7 @@ public class CcmBridge implements AutoCloseable {
         createOptions.add("-v git:" + BRANCH.trim().replaceAll("\"", ""));
 
       } else {
-        createOptions.add("-v " + VERSION.toString());
+        createOptions.add("-v " + SCYLLA_VERSION);
       }
       if (DSE_ENABLEMENT) {
         createOptions.add("--dse");
@@ -202,18 +203,20 @@ public class CcmBridge implements AutoCloseable {
       execute(
           "create",
           "ccm_1",
-          "-i",
-          ipPrefix,
+          "--scylla",
+          "--id",
+          idPrefix,
           "-n",
           Arrays.stream(nodes).mapToObj(n -> "" + n).collect(Collectors.joining(":")),
           createOptions.stream().collect(Collectors.joining(" ")));
-
       for (Map.Entry<String, Object> conf : cassandraConfiguration.entrySet()) {
         execute("updateconf", String.format("%s:%s", conf.getKey(), conf.getValue()));
+        // logger.warn("skipping ({}:{})", conf.getKey(), conf.getValue());
       }
       if (getCassandraVersion().compareTo(Version.V2_2_0) >= 0) {
-        execute("updateconf", "enable_user_defined_functions:true");
+        execute("updateconf", "enable_user_defined_functions:true", "experimental:true");
       }
+
       if (DSE_ENABLEMENT) {
         for (Map.Entry<String, Object> conf : dseConfiguration.entrySet()) {
           execute("updatedseconf", String.format("%s:%s", conf.getKey(), conf.getValue()));
@@ -279,6 +282,7 @@ public class CcmBridge implements AutoCloseable {
             + " --config-dir="
             + configDirectory.toFile().getAbsolutePath();
 
+    logger.warn("Executing: " + command);
     execute(CommandLine.parse(command));
   }
 
@@ -365,7 +369,7 @@ public class CcmBridge implements AutoCloseable {
     private final Map<String, Object> dseConfiguration = new LinkedHashMap<>();
     private final List<String> dseRawYaml = new ArrayList<>();
     private final List<String> jvmArgs = new ArrayList<>();
-    private String ipPrefix = "127.0.0.";
+    private String idPrefix = "0";
     private final List<String> createOptions = new ArrayList<>();
     private final List<String> dseWorkloads = new ArrayList<>();
 
@@ -375,13 +379,13 @@ public class CcmBridge implements AutoCloseable {
       try {
         this.configDirectory = Files.createTempDirectory("ccm");
         // mark the ccm temp directories for deletion when the JVM exits
-        this.configDirectory.toFile().deleteOnExit();
+        // this.configDirectory.toFile().deleteOnExit();
       } catch (IOException e) {
         // change to unchecked for now.
         throw new RuntimeException(e);
       }
       // disable auto_snapshot by default to reduce disk usage when destroying schema.
-      withCassandraConfiguration("auto_snapshot", "false");
+      // withCassandraConfiguration("auto_snapshot", "false");
     }
 
     public Builder withCassandraConfiguration(String key, Object value) {
@@ -409,8 +413,8 @@ public class CcmBridge implements AutoCloseable {
       return this;
     }
 
-    public Builder withIpPrefix(String ipPrefix) {
-      this.ipPrefix = ipPrefix;
+    public Builder withIdPrefix(String idPrefix) {
+      this.idPrefix = idPrefix;
       return this;
     }
 
@@ -460,7 +464,7 @@ public class CcmBridge implements AutoCloseable {
       return new CcmBridge(
           configDirectory,
           nodes,
-          ipPrefix,
+          idPrefix,
           cassandraConfiguration,
           dseConfiguration,
           dseRawYaml,
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java
index 1e502238e..9cf889fdf 100644
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java
@@ -15,6 +15,7 @@
  */
 package com.datastax.oss.driver.api.testinfra.ccm;
 
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -30,6 +31,8 @@ public class CustomCcmRule extends BaseCcmRule {
 
   private static AtomicReference<CustomCcmRule> current = new AtomicReference<>();
 
+  private static AtomicInteger cluster_id = new AtomicInteger(1);
+
   CustomCcmRule(CcmBridge ccmBridge) {
     super(ccmBridge);
   }
@@ -62,6 +65,10 @@ public class CustomCcmRule extends BaseCcmRule {
 
     private final CcmBridge.Builder bridgeBuilder = CcmBridge.builder();
 
+    public Builder() {
+      this.withIdPrefix(Integer.toString(cluster_id.incrementAndGet()));
+    }
+
     public Builder withNodes(int... nodes) {
       bridgeBuilder.withNodes(nodes);
       return this;
@@ -112,6 +119,11 @@ public class CustomCcmRule extends BaseCcmRule {
       return this;
     }
 
+    public Builder withIdPrefix(String idPrefix) {
+      bridgeBuilder.withIdPrefix(idPrefix);
+      return this;
+    }
+
     public CustomCcmRule build() {
       return new CustomCcmRule(bridgeBuilder.build());
     }
