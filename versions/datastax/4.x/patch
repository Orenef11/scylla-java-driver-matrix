Index: test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java	(revision 37b48e11762edc8366d38405d9e8d738c9b8e39e)
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CcmBridge.java	(date 1642497037729)
@@ -59,7 +59,7 @@
 
   private final AtomicBoolean created = new AtomicBoolean();
 
-  private final String ipPrefix;
+  private final String idPrefix;
 
   private final Map<String, Object> cassandraConfiguration;
   private final Map<String, Object> dseConfiguration;
@@ -71,6 +71,7 @@
 
   public static final Version VERSION =
       Objects.requireNonNull(Version.parse(System.getProperty("ccm.version", "3.11.0")));
+  public static final String SCYLLA_VERSION = System.getProperty("scylla.version");
 
   public static final String INSTALL_DIRECTORY = System.getProperty("ccm.directory");
 
@@ -129,7 +130,7 @@
   private CcmBridge(
       Path configDirectory,
       int[] nodes,
-      String ipPrefix,
+      String idPrefix,
       Map<String, Object> cassandraConfiguration,
       Map<String, Object> dseConfiguration,
       List<String> dseConfigurationRawYaml,
@@ -148,7 +149,7 @@
     } else {
       this.nodes = nodes;
     }
-    this.ipPrefix = ipPrefix;
+    this.idPrefix = idPrefix;
     this.cassandraConfiguration = cassandraConfiguration;
     this.dseConfiguration = dseConfiguration;
     this.rawDseYaml = dseConfigurationRawYaml;
@@ -194,23 +195,23 @@
     }
   }
 
-  private String getCcmVersionString(Version version) {
-    // for 4.0 pre-releases, the CCM version string needs to be "4.0-alpha1" or "4.0-alpha2"
-    // Version.toString() always adds a patch value, even if it's not specified when parsing.
-    if (version.getMajor() == 4
-        && version.getMinor() == 0
-        && version.getPatch() == 0
-        && version.getPreReleaseLabels() != null) {
-      // truncate the patch version from the Version string
-      StringBuilder sb = new StringBuilder();
-      sb.append(version.getMajor()).append('.').append(version.getMinor());
-      for (String preReleaseString : version.getPreReleaseLabels()) {
-        sb.append('-').append(preReleaseString);
-      }
-      return sb.toString();
-    }
-    return version.toString();
-  }
+//   private String getCcmVersionString(Version version) {
+//     // for 4.0 pre-releases, the CCM version string needs to be "4.0-alpha1" or "4.0-alpha2"
+//     // Version.toString() always adds a patch value, even if it's not specified when parsing.
+//     if (version.getMajor() == 4
+//         && version.getMinor() == 0
+//         && version.getPatch() == 0
+//         && version.getPreReleaseLabels() != null) {
+//       // truncate the patch version from the Version string
+//       StringBuilder sb = new StringBuilder();
+//       sb.append(version.getMajor()).append('.').append(version.getMinor());
+//       for (String preReleaseString : version.getPreReleaseLabels()) {
+//         sb.append('-').append(preReleaseString);
+//       }
+//       return sb.toString();
+//     }
+//     return version.toString();
+//   }
 
   public void create() {
     if (created.compareAndSet(false, true)) {
@@ -220,7 +221,7 @@
         createOptions.add("-v git:" + BRANCH.trim().replaceAll("\"", ""));
 
       } else {
-        createOptions.add("-v " + getCcmVersionString(VERSION));
+        createOptions.add("-v " + SCYLLA_VERSION);
       }
       if (DSE_ENABLEMENT) {
         createOptions.add("--dse");
@@ -228,8 +229,9 @@
       execute(
           "create",
           CLUSTER_NAME,
-          "-i",
-          ipPrefix,
+          "--scylla",
+          "--id",
+          idPrefix,
           "-n",
           Arrays.stream(nodes).mapToObj(n -> "" + n).collect(Collectors.joining(":")),
           createOptions.stream().collect(Collectors.joining(" ")));
@@ -238,7 +240,7 @@
         execute("updateconf", String.format("%s:%s", conf.getKey(), conf.getValue()));
       }
       if (getCassandraVersion().compareTo(Version.V2_2_0) >= 0) {
-        execute("updateconf", "enable_user_defined_functions:true");
+        execute("updateconf", "enable_user_defined_functions:true", "experimental:true");
       }
       if (DSE_ENABLEMENT) {
         for (Map.Entry<String, Object> conf : dseConfiguration.entrySet()) {
@@ -306,9 +308,9 @@
 
   public void add(int n, String dc) {
     if (getDseVersion().isPresent()) {
-      execute("add", "-i", ipPrefix + n, "-d", dc, "node" + n, "--dse");
+      execute("add", "-i", idPrefix + n, "-d", dc, "node" + n, "--dse");
     } else {
-      execute("add", "-i", ipPrefix + n, "-d", dc, "node" + n);
+      execute("add", "-i", idPrefix + n, "-d", dc, "node" + n);
     }
     start(n);
   }
@@ -428,7 +430,7 @@
     private final Map<String, Object> dseConfiguration = new LinkedHashMap<>();
     private final List<String> dseRawYaml = new ArrayList<>();
     private final List<String> jvmArgs = new ArrayList<>();
-    private String ipPrefix = "127.0.0.";
+    private String idPrefix = "0";
     private final List<String> createOptions = new ArrayList<>();
     private final List<String> dseWorkloads = new ArrayList<>();
 
@@ -438,13 +440,14 @@
       try {
         this.configDirectory = Files.createTempDirectory("ccm");
         // mark the ccm temp directories for deletion when the JVM exits
-        this.configDirectory.toFile().deleteOnExit();
+        //         this.configDirectory.toFile().deleteOnExit();
+
       } catch (IOException e) {
         // change to unchecked for now.
         throw new RuntimeException(e);
       }
       // disable auto_snapshot by default to reduce disk usage when destroying schema.
-      withCassandraConfiguration("auto_snapshot", "false");
+      //       withCassandraConfiguration("auto_snapshot", "false");
     }
 
     public Builder withCassandraConfiguration(String key, Object value) {
@@ -472,8 +475,8 @@
       return this;
     }
 
-    public Builder withIpPrefix(String ipPrefix) {
-      this.ipPrefix = ipPrefix;
+    public Builder withIdPrefix(String idPrefix) {
+      this.idPrefix = idPrefix;
       return this;
     }
 
@@ -525,7 +528,7 @@
       return new CcmBridge(
           configDirectory,
           nodes,
-          ipPrefix,
+          idPrefix,
           cassandraConfiguration,
           dseConfiguration,
           dseRawYaml,
Index: test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java
--- a/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java	(revision 37b48e11762edc8366d38405d9e8d738c9b8e39e)
+++ b/test-infra/src/main/java/com/datastax/oss/driver/api/testinfra/ccm/CustomCcmRule.java	(date 1642496738192)
@@ -15,6 +15,7 @@
  */
 package com.datastax.oss.driver.api.testinfra.ccm;
 
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -30,6 +31,8 @@
 
   private static AtomicReference<CustomCcmRule> current = new AtomicReference<>();
 
+  private static AtomicInteger cluster_id = new AtomicInteger(1);
+
   CustomCcmRule(CcmBridge ccmBridge) {
     super(ccmBridge);
   }
@@ -62,6 +65,10 @@
 
     private final CcmBridge.Builder bridgeBuilder = CcmBridge.builder();
 
+    public Builder() {
+      this.withIdPrefix(Integer.toString(cluster_id.incrementAndGet()));
+    }
+
     public Builder withNodes(int... nodes) {
       bridgeBuilder.withNodes(nodes);
       return this;
@@ -111,6 +118,11 @@
       bridgeBuilder.withSslAuth();
       return this;
     }
+
+    public Builder withIdPrefix(String idPrefix) {
+      bridgeBuilder.withIdPrefix(idPrefix);
+      return this;
+    }
 
     public CustomCcmRule build() {
       return new CustomCcmRule(bridgeBuilder.build());
Index: test-infra/revapi.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test-infra/revapi.json b/test-infra/revapi.json
--- a/test-infra/revapi.json	(revision 37b48e11762edc8366d38405d9e8d738c9b8e39e)
+++ b/test-infra/revapi.json	(date 1642496738192)
@@ -72,6 +72,16 @@
         "justification": "Method arguments were mistakenly annotated with @NonNull"
       },
       {
+        "code": "java.method.removed",
+        "old": "method com.datastax.oss.driver.api.testinfra.ccm.CcmBridge.Builder com.datastax.oss.driver.api.testinfra.ccm.CcmBridge.Builder::withIpPrefix(java.lang.String)",
+        "justification": "Scylla CCM support"
+      },
+      {
+        "code": "java.method.removed",
+        "old": "method com.datastax.oss.driver.api.testinfra.ccm.CustomCcmRule.Builder com.datastax.oss.driver.api.testinfra.ccm.CustomCcmRule.Builder::withIpPrefix(java.lang.String)",
+        "justification": "Scylla CCM support"
+      },
+      {
         "code": "java.method.parameterTypeParameterChanged",
         "old": "parameter com.datastax.oss.driver.api.testinfra.simulacron.QueryCounter.QueryCounterBuilder com.datastax.oss.driver.api.testinfra.simulacron.QueryCounter::builder(===com.datastax.oss.simulacron.server.BoundTopic===)",
         "new": "parameter com.datastax.oss.driver.api.testinfra.simulacron.QueryCounter.QueryCounterBuilder com.datastax.oss.driver.api.testinfra.simulacron.QueryCounter::builder(===com.datastax.oss.simulacron.server.BoundTopic<?, ?>===)",
Index: integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java b/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java
--- a/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java	(revision 37b48e11762edc8366d38405d9e8d738c9b8e39e)
+++ b/integration-tests/src/test/java/com/datastax/oss/driver/core/metadata/NodeMetadataIT.java	(date 1642496738192)
@@ -58,7 +58,7 @@
                   assertThat(broadcastAddress.getAddress()).isEqualTo(connectAddress.getAddress()));
       assertThat(node.getListenAddress().get().getAddress()).isEqualTo(connectAddress.getAddress());
       assertThat(node.getDatacenter()).isEqualTo("dc1");
-      assertThat(node.getRack()).isEqualTo("r1");
+      assertThat(node.getRack()).isEqualTo("RAC1");
       if (!CcmBridge.DSE_ENABLEMENT) {
         // CcmBridge does not report accurate C* versions for DSE, only approximated values
         assertThat(node.getCassandraVersion()).isEqualTo(ccmRule.getCassandraVersion());
